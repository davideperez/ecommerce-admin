// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String @id @default(uuid())
  name        String
  userId      String
  //
  billboards  Billboard[] @relation("StoreToBillboard")
  //
  categories  Category[] @relation("StoreToCategory")
  sizes       Size[] @relation("StoreToSize")
  colors      Color[] @relation("StoreToColor")
  products    Product[] @relation("StoreToProduct")
  orders      Order[] @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}  

model Billboard {
  id          String @id @default(uuid())
  //
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  //
  label       String
  imageUrl    String
  // Esto quiere decir que la tabla/modelo Category referencia a Billboard.
  // Se creo una relacion hacia el modelo/tabla Billboard.
  // Vemos que 1 Billboard tiene 1 o varias categorias.
  // Como sabemos que varias?? Porque tiene el array [].
  categories  Category[]
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Aca estoy siendo redundante e indicando que storId, es un id de otro modelo.
  @@index([storeId])
}

// 
// categories  Category[]. 

// 
// Billboard[] @relation("StoreToBillboard")




model Category {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToCategory", fields: [storeId], references: [id])
  // Esto quiere decir que, que la property billboard va a tener como modelo a el modelo Billboard.
  // Como se va a relacionar Category con Billboard? La property billboardId de Category se relaciona/hace referencia a el id de Billboard.
  // Esto seria, en definitiva, definir la clave foranea: la property billboardId de Category, es clave foranea de Billboard.
  // Porque es clave foranea?: Porque es repetir la clave o id de Billboard.
  // Por lo general se hace esta parte primero, y luego en Billboard el 
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  //
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String 
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)
  sizeId      String
  size        Size @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color @relation(fields: [colorId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String @id @default(uuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}


model Order {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean @default(false)
  phone       String @default("")
  address     String @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model OrderItem  {
  id          String @id @default(uuid())
  orderId     String
  order       Order @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}